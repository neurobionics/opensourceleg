name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - uses: ./.github/actions/setup-uv-env
        with:
          python-version: "3.11"

      - name: Check if the repository is consistent
        run: |
          uv run deptry . --ignore DEP002,DEP001,DEP003

      - name: Check code style
        run: |
          uv run pre-commit run -a --show-diff-on-failure

  test:
    name: Tests - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - uses: ./.github/actions/setup-uv-env
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run tests
        run: |
          uv run pytest --cov --cov-config=pyproject.toml --cov-report=xml
        shell: bash

      - name: Upload coverage reports to Codecov with GitHub Action on Ubuntu
        uses: codecov/codecov-action@v4
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build-wheels:
    name: Build Wheels - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
        shell: bash

      - name: Add UV to Path
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install dependencies
        run: uv sync
        shell: bash

      - name: Install pip in uv environment (Windows only)
        if: matrix.os == 'windows-latest'
        run: uv add pip
        shell: bash

      - name: Build wheels (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          uv run maturin build --release --find-interpreter --out dist
        shell: bash

      - name: Build wheels (Unix)
        if: matrix.os != 'windows-latest'
        run: uv run maturin build --release --out dist
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist

  build-cross-platform:
    name: Build Cross-Platform Wheels - ARM
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cross-compilation targets
        run: |
          rustup target add aarch64-unknown-linux-gnu
          rustup target add armv7-unknown-linux-gnueabihf

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to Path
        run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync

      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: Build ARM64 wheel (Raspberry Pi 4/5)
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: uv run maturin build --release --target aarch64-unknown-linux-gnu --find-interpreter --out dist

      - name: Build ARMhf wheel (Raspberry Pi 3/older)
        env:
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
        run: uv run maturin build --release --target armv7-unknown-linux-gnueabihf --find-interpreter --out dist

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-cross-platform
          path: dist

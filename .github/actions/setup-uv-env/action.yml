name: "setup-uv-env"
description: "Composite action to setup the Python, UV, and Rust environment."

inputs:
  python-version:
    required: false
    description: "The python version to use"
    default: "3.11"

runs:
  using: "composite"
  steps:
    - name: Set up python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh
      shell: bash

    - name: Add UV to Path
      run: echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      shell: bash

    # Cache UV's cache directory, virtual environment, and Rust cache
    - name: Load cached UV and Rust environment
      id: cached-uv-dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/uv
          target
          ~/.cargo/registry
          ~/.cargo/git
        # Include uv.lock and Cargo.toml in the cache key to catch dependency changes
        key: uv-rust-${{ runner.os }}-py${{ inputs.python-version }}-${{ hashFiles('uv.lock', 'pyproject.toml', 'Cargo.toml') }}-v1

    - name: Install dependencies
      run: |
        if [ "${{ steps.cached-uv-dependencies.outputs.cache-hit }}" == 'true' ]; then
          echo "Using cached UV environment"

          # Validate the cached environment contains expected tools
          if ! uv run pre-commit --version &>/dev/null || \
             ! uv run pytest --version &>/dev/null || \
             ! uv run mypy --version &>/dev/null; then
            echo "Cached environment is missing required tools. Reinstalling..."
            rm -rf .venv
            uv sync
          fi
        else
          echo "Installing dependencies with UV"
          rm -rf .venv || true
          uv sync
        fi
      shell: bash

    - name: Install pip in uv environment (Windows only)
      if: runner.os == 'Windows'
      run: uv add pip
      shell: bash

    - name: Build Rust extension (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Building Rust extension..."
        uv run maturin develop --release
      shell: bash

    - name: Build Rust extension (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Building Rust extension..."
        uv run maturin develop --release
      shell: bash

    - name: Verify development tools installation
      run: |
        echo "Verifying pre-commit installation..."
        uv run pre-commit --version
        echo "Verifying pytest installation..."
        uv run pytest --version
        echo "Verifying mypy installation..."
        uv run mypy --version
        echo "Verifying Rust backend..."
        uv run python -c "import opensourceleg; print('Rust backend available:', opensourceleg.HAS_RUST_BACKEND)"
      shell: bash
